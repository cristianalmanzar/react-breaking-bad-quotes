{"version":3,"sources":["components/loader/Loader.js","components/blockquote/BlockQuote.js","components/examples/MultipleCustomHooks.js","hooks/useCounter.js","hooks/useFetch.js","index.js"],"names":["Loader","className","BlockQuote","author","quote","MultipleCustomHooks","initialState","useState","counter","setCounter","increment","decrease","reset","useCounter","url","data","loading","error","state","setState","useEffect","fetch","then","resp","json","useFetch","console","log","onClick","ReactDOM","render","document","getElementById"],"mappings":"yPAGaA,G,KAAS,WAClB,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,cCHdC,EAAa,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,MAChC,OACI,oCACI,gCAAYH,UAAU,eAClB,uBAAGA,UAAU,QAAQG,GACrB,4BAAQH,UAAU,qBAAqBE,MCA1CE,G,MAAsB,WAAO,IAAD,ECLf,WAAyB,IAAvBC,EAAsB,uDAAP,GAAO,EAEhBC,mBAASD,GAFO,mBAEvCE,EAFuC,KAE9BC,EAF8B,KAIxCC,EAAY,WACVF,EAAU,IACVC,EAAYD,EAAU,IAIxBG,EAAW,WACTH,EAAU,GACVC,EAAYD,EAAU,IAIxBI,EAAQ,WACVH,EAAWH,IAGf,MAAQ,CACJE,UACAE,YACAC,WACAC,SDjBmCC,CAAW,GAA3CL,EAF8B,EAE9BA,QAASE,EAFqB,EAErBA,UAAWC,EAFU,EAEVA,SAFU,EENjB,SAAEG,GAAU,IAAD,EAEPP,mBAAS,CAAEQ,KAAM,KAAMC,SAAS,EAAMC,MAAO,OAFtC,mBAE1BC,EAF0B,KAEnBC,EAFmB,KAkBjC,OAfAC,qBAAU,WAERD,EAAS,CAAEJ,KAAM,KAAMC,SAAS,EAAMC,MAAO,OAE7CI,MAAMP,GACAQ,MAAM,SAAAC,GAAI,OAAIA,EAAKC,UACnBF,MAAM,SAAAP,GACHI,EAAS,CACNH,SAAS,EACTC,MAAO,KACPF,cAGX,CAACD,IAEGI,EFRqBO,CAAS,6CAAD,OAA8CjB,IAAxEQ,EAJ6B,EAI7BA,QAASD,EAJoB,EAIpBA,KAJoB,IAMTA,GAAQA,EAAK,GAAjCZ,EAN6B,EAM7BA,OAAQC,EANqB,EAMrBA,MAGhB,OADAsB,QAAQC,IAAInB,GAER,6BACI,yBAAKP,UAAU,sBACX,mDACA,8BAIAe,EAGI,kBAAC,EAAD,MAIA,kBAAC,EAAD,CAAYb,OAAQA,EAAQC,MAAOA,IAI3C,yBAAKH,UAAU,iBACX,4BAAQA,UAAU,iBAAiB2B,QAASjB,GAA5C,qBAGA,4BAAQV,UAAU,iBAAiB2B,QAASlB,GAA5C,qB,MGvBhBmB,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.9afaa916.chunk.js","sourcesContent":["import React from 'react'\nimport './loader.css'\n\nexport const Loader = () => {\n    return (\n        <div className=\"center\">\n            <div className=\"loader\"></div>\n        </div>\n    )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types';\n\nexport const BlockQuote = ({author, quote}) => {\n    return (\n        <>\n            <blockquote className=\"blockquote \">\n                <p className=\"mb-0\">{quote}</p>\n                <footer className=\"blockquote-footer\">{author}</footer>\n            </blockquote>\n        </>\n    )\n}\n\nBlockQuote.propTypes = {\n    author: PropTypes.string.isRequired,\n    quote: PropTypes.string.isRequired\n}\n","import React from 'react'\nimport { useFetch } from '../../hooks/useFetch'\nimport { useCounter } from '../../hooks/useCounter'\nimport { Loader } from '../loader/Loader'\nimport { BlockQuote } from '../blockquote/BlockQuote'\nimport './multiple.css'\n\n\nexport const MultipleCustomHooks = () => {\n\n    const {counter, increment, decrease} = useCounter(1);\n\n    const { loading, data } = useFetch(`https://www.breakingbadapi.com/api/quotes/${counter}`);\n    \n    const { author, quote } = !!data && data[0];\n    \n    console.log(counter);\n    return (\n        <div>\n            <div className=\"header text-center\">\n                <h1>Breaking Bad Quotes</h1>\n                <hr/>\n            </div>\n\n            {\n                loading\n                ?\n                (\n                    <Loader/>\n                )\n                :\n                (\n                    <BlockQuote author={author} quote={quote}/>\n                )\n            }\n\n            <div className=\"footer spaced\">\n                <button className=\"button primary\" onClick={decrease}>\n                    Previous quote...\n                </button>\n                <button className=\"button primary\" onClick={increment}>\n                    Next quote...\n                </button>\n            </div>\n\n        </div>\n        \n    )\n}\n","import { useState } from \"react\"\n\n\nexport const useCounter = ( initialState = 10) => {\n\n    const [counter, setCounter] = useState(initialState) //10\n\n    const increment = ( ) => {\n        if( counter < 30) {\n            setCounter( counter + 1)\n        }\n    }\n\n    const decrease = ( ) => {\n        if( counter > 1 ) {\n            setCounter( counter - 1)\n        }\n    }\n\n    const reset = ( ) => {\n        setCounter(initialState)\n    }\n\n    return  {\n        counter,\n        increment,\n        decrease,\n        reset\n    }\n}\n","import React, { useState, useEffect } from 'react'\n\nexport const useFetch = ( url ) => {\n\n  const [state, setState] = useState({ data: null, loading: true, error: null})\n  useEffect(() => {\n      \n    setState({ data: null, loading: true, error: null})\n\n    fetch(url)\n         .then( resp => resp.json())\n         .then( data => {\n             setState({\n                loading: false,\n                error: null,\n                data\n             })\n         })\n  }, [url])\n\n  return state\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { CounterApp } from './components/useState/CounterApp';\n// import { CounterCustomHook } from './components/useState/CounterCustomHook';\n// import { SimpleForm } from './components/useEffect/SimpleForm';\n// import { FormCustomHook } from './components/useEffect/FormCustomHook';\nimport { MultipleCustomHooks } from './components/examples/MultipleCustomHooks';\nimport { FocusScreen } from './components/useRef/FocusScreen';\n\n\n\n\n\n\n\n\n\nReactDOM.render(\n    <MultipleCustomHooks/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}